#+TITLE: config.el
#+AUTHOR: Nobuyuki Kamimoto

* config
** header

#+begin_src emacs-lisp :tangle yes

;;; package --- Summary
;;; Commentary:
;;; Code:

#+end_src

** OS判定用定数

#+begin_src emacs-lisp :tangle yes

(defconst IS-MAC (eq system-type 'darwin))
(defconst IS-LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
(defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))

#+end_src

** straight

Emacs標準の ~package.el+quelpa~ や ~el-get~ 等を色々試した結果、
たどり着いたパッケージマネージャー。
設定は ~init.el~ に記述。

| コマンド                  | 動作                                                                      |
|--------------------------+--------------------------------------------------------------------------|
| straight-use-package     | パッケージのインストール                                                   |
| straight-pull-all        | 全てのパッケージを最新の状態に更新                                          |
| straight-freeze-versions | ロックファイルを作成                                                       |
| straight-thaw-versions   | ロックファイルのバージョンでインストールックファイルのバージョンでインストール |

** use-package

#+begin_src emacs-lisp :tangle yes

(straight-use-package 'use-package)

#+end_src

** bind-key

#+begin_src emacs-lisp :tangle yes

(use-package bind-key :straight t)

#+end_src

** general

#+begin_src emacs-lisp :tangle yes

(use-package general
  :straight t
  :custom (general-override-states '(insert emacs hybrid normal visual motion operator replace))
  :config
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC" :prefix-command 'my-space-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC s" :prefix-command 'search-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC g" :prefix-command 'goto-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC o" :prefix-command 'my-org-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC f" :prefix-command 'my-file-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC b" :prefix-command 'my-buffer-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC e" :prefix-command 'my-error-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC q" :prefix-command 'my-quit-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC t" :prefix-command 'my-toggle-map)
  (general-def :states '(normal visual) :keymaps 'override :prefix "SPC c" :prefix-command 'my-string-inflection-map))

#+end_src

** org

~org-mode~ に関する基本的な設定をしています。

#+begin_src emacs-lisp :tangle yes

(use-package org
  :demand t
  :custom ((org-startup-folded 'content)
	   (org-fold-core-style 'overlays)
	   (org-edit-src-content-indentation 0))
  :bind (nil
	 :map my-org-map
	 ("o" . org-open-at-point)
	 ("l" . org-link)
	 ("e" . org-edit-special)))

#+end_src

*** org-agenda

~org-agenda~ のキーバインドを設定しています。
また、同じ内容が２行表示されることがあったので、フックを追加しています。

#+begin_src emacs-lisp :tangle yes

(use-package org-agenda
  :custom (org-agenda-files (file-expand-wildcards (concat org-directory "/*.org")))
  :bind (nil
	 :map my-org-map
	 ("a" . org-agenda)))

#+end_src

*** [[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]]

カーソル上のタスクでポモドーロタイマーを設定してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package org-pomodoro
  :straight t
  :bind (nil
	 :map my-org-map
	 ("p" . org-pomodoro)))

#+end_src

*** org-rainbow-tags

#+begin_src emacs-lisp :tangle yes

(use-package org-rainbow-tags
  :straight (:host github :repo "KaratasFurkan/org-rainbow-tags")
  :custom (org-rainbow-tags-extra-face-attributes '(:inverse-video t :box t :weight 'bold))
  :hook (org-mode . org-rainbow-tags-mode))

#+end_src

*** [[https://github.com/0x60df/ox-qmd][ox-qmd]] (qiita投稿用)

#+begin_src emacs-lisp :tangle yes

(use-package ox-qmd
  :straight t)

#+end_src

*** denote

#+begin_src emacs-lisp :tangle yes

(use-package denote
  :straight t
  :demand t
  :custom ((denote-directory org-directory)
	   (denote-infer-keywords t)
	   (denote-sort-keywords t)
	   (denote-file-type nil)
	   (denote-prompts '(title keywords))
	   (denote-date-prompt-use-org-read-date t)
	   (denote-allow-multi-word-keywords t)
	   (denote-date-format nil)
	   (denote-link-fontify-backlinks t))
  :bind (nil
	 :map my-space-map
	 ("d" . denote))
  :general (:states '(normal visual) :keymaps 'override :prefix "SPC d" :prefix-command 'my-denote-map)
  :hook (dired-mode . denote-dired-mode-in-directories))

#+end_src

**** consult-denote

#+begin_src emacs-lisp :tangle yes

(use-package consult-denote
  :straight (consult-denote :type git :host codeberg :repo "whhone/consult-denote")
  :bind (nil
	 :map my-denote-map
	 ("d" . consult-denote-open-or-create)
	 ("i" . consult-denote-link-insert-link)
	 ("r" . consult-denote-ripgrep)))

#+end_src

*** org-modern

#+begin_src emacs-lisp :tangle yes

(use-package org-modern
  :straight t
  :init
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  (global-org-modern-mode +1))

#+end_src

** Emacs標準機能の設定

*** 最適化

#+begin_src emacs-lisp :tangle yes

(when IS-WINDOWS
  (setq w32-get-true-file-attributes nil
	w32-pipe-read-delay 0
	w32-pipe-buffer-size (* 64 1024)))

(unless IS-MAC
  (setq command-line-ns-option-alist nil))

(unless IS-LINUX
  (setq command-line-x-option-alist nil))

(setq read-process-output-max #x10000)

(setq ffap-machine-p-known 'reject)

#+end_src

*** UI

#+begin_src emacs-lisp :tangle yes

(setq-default cursor-in-non-selected-windows nil)

(setq highlight-nonselected-windows nil)

(setq fast-but-imprecise-scrolling t)
(setq redisplay-skip-initial-frame t)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t
      frame-resize-pixelwise t)

;; Suppress GUI features
(setq use-file-dialog nil
      use-dialog-box nil)

(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message user-login-name
      inhibit-default-init t
      initial-scratch-message nil)

#+end_src

*** カーソルの点滅を無効化

#+begin_src emacs-lisp :tangle yes

(use-package frame
  :init
  (blink-cursor-mode -1))

#+end_src

*** 画面の更新頻度

#+begin_src emacs-lisp :tangle yes

(use-package simple
  :custom (idle-update-delay 1.0))

#+end_src

*** 外枠の調整

#+begin_src emacs-lisp :tangle yes

(setq indicate-buffer-boundaries nil
      indicate-empty-lines nil)

(use-package frame
  :custom ((window-divider-default-places t)
	   (window-divider-default-bottom-width 1)
	   (window-divider-default-right-width 1))
  :init
  (window-divider-mode +1))

#+end_src

*** 水平分割より垂直分割を優先する

#+begin_src emacs-lisp :tangle yes

(use-package window
  :custom ((split-width-threshold 160)
	   (split-height-threshold nil)))

#+end_src

*** 補完時に大文字小文字を区別しない

#+begin_src emacs-lisp :tangle yes

(setq read-buffer-completion-ignore-case t
      completion-ignore-case t)

(use-package minibuffer
  :custom (read-file-name-completion-ignore-case t))

#+end_src

*** yes-or-noをy-or-nに変更

#+begin_src emacs-lisp :tangle yes

(setq use-short-answers t)

#+end_src

*** 自動生成ファイルを無効にする

#+begin_src emacs-lisp :tangle yes

(use-package files
  :custom ((make-backup-files nil)
	   (auto-save-default nil)))

(use-package emacs
  :custom ((create-lockfiles nil)
	   (auto-save-list-file-prefix nil)))

#+end_src

*** デーモン起動

~emacsclient~ コマンドで高速にファイルが開けます。

#+begin_src emacs-lisp :tangle yes

(use-package server
  :init
  (server-mode +1))

#+end_src

*** 最後のカーソル位置を保存する

#+begin_src emacs-lisp :tangle yes

(use-package saveplace
  :init
  (save-place-mode +1))

#+end_src

*** ファイルの閲覧履歴を保存する

#+begin_src emacs-lisp :tangle yes

(use-package recentf
  :custom (recentf-max-saved-items 200)
  :init
  (recentf-mode +1))

#+end_src

*** コマンドの履歴を保存

#+begin_src emacs-lisp :tangle yes

(use-package savehist
  :init
  (savehist-mode +1))

#+end_src

*** 対応括弧を強調表示

#+begin_src emacs-lisp :tangle yes

(use-package paren
  :init
  (show-paren-mode +1))

#+end_src

*** 現在行を強調表示

#+begin_src emacs-lisp :tangle yes

(use-package hl-line
  :init
  (global-hl-line-mode +1))

#+end_src

*** 他プロセスの編集をバッファに反映

#+begin_src emacs-lisp :tangle yes

(use-package autorevert
  :init
  (global-auto-revert-mode +1))

#+end_src

*** 行番号の表示

#+begin_src emacs-lisp :tangle yes

(use-package display-line-numbers
  :custom (display-line-numbers-width-start t)
  :init
  (global-display-line-numbers-mode +1))

#+end_src

*** カーソル上の関数名等をモードラインに表示

#+begin_src emacs-lisp :tangle yes

(use-package which-func
  :init
  (which-function-mode +1))

#+end_src

*** メニューバーを無効化

#+begin_src emacs-lisp :tangle yes

(use-package menu-bar
  :init
  (menu-bar-mode -1))

#+end_src

*** ツールバーを無効化

#+begin_src emacs-lisp :tangle yes

(use-package tool-bar
  :init
  (tool-bar-mode -1))

#+end_src

*** スクロールバーの無効化

#+begin_src emacs-lisp :tangle yes

(use-package scroll-bar
  :init
  (scroll-bar-mode -1))

#+end_src

*** GC中にフォントを圧縮しない

#+begin_src emacs-lisp :tangle yes

(setq inhibit-compacting-font-caches t)

#+end_src

*** 削除したファイルをゴミ箱に移動させる

#+begin_src emacs-lisp :tangle yes

(setq delete-by-moving-to-trash t)

#+end_src

*** 便利コマンドをEvil向けに登録

#+begin_src emacs-lisp :tangle yes

(use-package simple
  :bind (nil
	 :map my-space-map
	 ("SPC" . execute-extended-command)))

(use-package files
  :bind (nil
	 :map my-quit-map
	 ("q" . save-buffers-kill-terminal)
	 :map my-file-map
	 ("f" . find-file)))

(use-package bookmark
  :bind (nil
	 :map my-file-map
	 ("b" . bookmark-jump)))

(use-package window
  :bind (nil
	 :map my-space-map
	 ("0" . delete-window)
	 ("1" . delete-other-windows)
	 ("2" . split-window-below)
	 ("3" . split-window-right)
	 ("4" . switch-to-buffer-other-window)
	 ("w" . other-window)
	 :map my-buffer-map
	 ("b" . switch-to-buffer)))

(use-package frame
  :bind (("<f12>" . other-frame)
	 :map my-space-map
	 ("W" . other-frame)))

(use-package subr
  :bind (nil
	 :map my-space-map
	 ("5" . ctl-x-5-prefix)))

(use-package menu-bar
  :bind (nil
	 :map my-buffer-map
	 ("d" . kill-this-buffer)))

(use-package project
  :bind (nil
	 :map my-buffer-map
	 ("p" . project-switch-to-buffer)))

(use-package isearch
  :bind (nil
	 :map search-map
	 ("s" . isearch-forward)))

#+end_src

** 文字コード

#+begin_src emacs-lisp :tangle yes

(use-package mule
  :init
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8))

(use-package mule
  :if IS-WINDOWS
  :init
  (set-file-name-coding-system 'cp932)
  (set-keyboard-coding-system 'cp932)
  (set-terminal-coding-system 'cp932))

#+end_src

*** shift-jisよりcp932を優先

#+begin_src emacs-lisp :tangle yes

(when IS-WINDOWS
  (set-coding-system-priority 'utf-8
			      'euc-jp
			      'iso-2022-jp
			      'cp932))

#+end_src

** whitespace

末尾のスペースやタブを可視化することができます。
~highlight-indent-guides~ と相性が悪いのでタブは可視化していません。

#+begin_src emacs-lisp :tangle yes

(use-package whitespace
  :custom (whitespace-style '(face trailing))
  :init
  (global-whitespace-mode +1))

#+end_src

** IME

Emacsは~C-\~で日本語入力を切り替えることができますが、
デフォルトだとあまり補完が賢くないのでOSに合わせて導入します。

*** [[https://github.com/trueroad/tr-emacs-ime-module][tr-ime]]

#+begin_src emacs-lisp :tangle yes

(use-package tr-ime
  :straight t
  :if IS-WINDOWS
  :custom (default-input-method "W32-IME")
  :init
  (tr-ime-standard-install)
  (w32-ime-initialize))

#+end_src

*** mozc

[[https://www.kkaneko.jp/tools/server/mozc.html][日本語変換 Mozc の設定，emacs 用の Mozc の設定（Ubuntu 上）]] を参考にしています。

**** 必要なパッケージを導入

#+begin_src shell :tangle no

sudo apt install fcitx-libs-dev
sudo apt install emacs-mozc
fcitx-config-gtk

#+end_src

**** Emacs側の設定

#+begin_src emacs-lisp :tangle yes

(use-package mozc
  :straight t
  :if IS-LINUX
  :custom (default-input-method "japanese-mozc"))

#+end_src

** フォントの設定

私は [[https://github.com/protesilaos/fontaine][fontaine]] を使用してフォントを設定しています。

#+begin_src emacs-lisp :tangle yes

(use-package fontaine
  :straight t
  :demand t
  :hook (kill-emacs . fontaine-store-latest-preset)
  :config
  (cond (IS-LINUX
	 (setq fontaine-presets
	       '((regular
		  :default-family "VLゴシック"
		  :default-height 100
		  :fixed-pitch-family "VLゴシック"
		  :variable-pitch-family "VLPゴシック"
		  :italic-family "VLゴシック"
		  :line-spacing 1)
		 (large
		  :default-family "VLゴシック"
		  :default-height 150
		  :variable-pitch-family "VLPゴシック"
		  :line-spacing 1))))

	(IS-WINDOWS
	 (setq fontaine-presets
	       '((regular
		  :default-family "BIZ UDゴシック"
		  :default-height 120
		  :fixed-pitch-family "BIZ UDゴシック"
		  :variable-pitch-family "BIZ UDPゴシック"
		  :italic-family "BIZ UDゴシック"
		  :line-spacing 1)
		 (large
		  :default-family "BIZ UDゴシック"
		  :default-height 150
		  :variable-pitch-family "BIZ UDPゴシック"
		  :line-spacing 1)))))

  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))

#+end_src

** modeline

*** [[https://github.com/TeMPOraL/nyan-mode][nyan-mode]]

バッファー上での位置をニャンキャットが教えてくれるパッケージです。
マウスでクリックすると大体の位置にジャンプもできます。

#+begin_src emacs-lisp :tangle yes

(use-package nyan-mode
  :straight t
  :custom ((nyan-animate-nyancat t)
	   (nyan-bar-length 24))
  :init
  (nyan-mode +1))

#+end_src

*** doom-modeline

#+begin_src emacs-lisp :tangle yes

(use-package doom-modeline
  :straight t
  :init
  (doom-modeline-mode +1))

#+end_src

*** minions

#+begin_src emacs-lisp :tangle yes

(use-package minions
  :straight t
  :hook (doom-modeline-mode . minions-mode))

#+end_src

** [[https://github.com/emacs-evil/evil][evil]]

VimキーバインドをEmacs上で実現してくれるパッケージです。

#+begin_src emacs-lisp :tangle yes

(use-package evil
  :straight t
  :custom ((evil-want-keybinding nil)
	   (evil-symbol-word-search t)
	   (evil-kill-on-visual-paste nil))
  :init
  (evil-mode +1)
  :config
  (defun my/evil-shift-right ()
    (interactive)
    (evil-shift-right evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

  (defun my/evil-shift-left ()
    (interactive)
    (evil-shift-left evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

  (evil-define-key 'visual global-map (kbd ">") 'my/evil-shift-right)
  (evil-define-key 'visual global-map (kbd "<") 'my/evil-shift-left))

#+end_src

*** [[https://github.com/emacs-evil/evil-collection][evil-collection]]

各モードのキーバインドを自動的に設定してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package evil-collection
  :straight t
  :after evil
  :init
  (evil-collection-init))

#+end_src

*** [[https://github.com/linktohack/evil-commentary][evil-commentary]]

~gc~ でコメントアウトしてくれるパッケージです。

#+begin_src emacs-lisp :tangle yes

(use-package evil-commentary
  :straight t
  :after evil
  :init
  (evil-commentary-mode +1))

#+end_src

*** [[https://github.com/emacs-evil/evil-surround][evil-surround]]

選択中に ~S~ を入力して任意の文字を入力すると囲んでくれるパッケージです。
- （例１） aaaを選択中に ~S(~
aaa -> ( aaa )

- （例２） aaaを選択中に ~S)~
aaa -> (aaa)

#+begin_src emacs-lisp :tangle yes

(use-package evil-surround
  :straight t
  :after evil
  :init
  (global-evil-surround-mode +1))

#+end_src

*** [[https://github.com/redguardtoo/evil-matchit][evil-matchit]]

~%~ でHTMLのタグ間をジャンプしてくれるようになります。

#+begin_src emacs-lisp :tangle yes

(use-package evil-matchit
  :straight t
  :after evil
  :init
  (global-evil-matchit-mode +1))

#+end_src

*** [[https://github.com/Somelauw/evil-org-mode][evil-org]]

~org-agenda~ 等のorg系の特殊なモードでキーバインドを設定してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package evil-org
  :straight t
  :after evil
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (evil-org-agenda-set-keys))

#+end_src

*** [[https://github.com/edkolev/evil-lion][evil-lion]]

~gl~ ~gL~ で整列してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package evil-lion
  :straight t
  :after evil
  :init
  (evil-lion-mode +1))

#+end_src

*** evil-textobj-tree-sitter

#+begin_src emacs-lisp :tangle yes

(use-package evil-textobj-tree-sitter
  :straight t
  :after tree-sitter
  :config
  ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  ;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
  ;; You can also bind multiple items and we will match the first one we can find
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer"))))

#+end_src

** fussy

#+begin_src emacs-lisp :tangle yes

(use-package fussy
  :straight t
  :custom ((completion-styles '(fussy))
	   (completion-category-defaults nil)
	   (completion-category-overrides nil)
	   (fussy-use-cache t)
	   (fussy-filter-fn #'fussy-filter-default)
	   (fussy-default-regex-fn #'fussy-pattern-flex-2))
  :config
  (with-eval-after-load 'fuz-bin
    (setq fussy-score-fn #'fussy-fuz-bin-score))

  (with-eval-after-load 'prescient
    (setq fussy-compare-same-score-fn #'fussy-strlen<))

  (with-eval-after-load 'corfu
    (advice-add 'corfu--capf-wrapper :before 'fussy-wipe-cache)
    (add-hook 'corfu-mode-hook
	      (lambda ()
		(setq-local fussy-max-candidate-limit 5000
			    fussy-prefer-prefix nil)))))

#+end_src

*** fuz-bin

#+begin_src emacs-lisp :tangle yes

(use-package fuz-bin
  :straight (fuz-bin :repo "jcs-elpa/fuz-bin" :fetcher github :files (:defaults "bin"))
  :config
  (fuz-bin-load-dyn))

#+end_src

** prescient

~prescient-persist-mode~ で履歴を永続的に保存

#+begin_src emacs-lisp :tangle yes

(use-package prescient
  :straight t
  :config
  (prescient-persist-mode +1)

  (with-eval-after-load 'fussy
    (setq prescient-sort-length-enable nil)))

#+end_src

** corfu

#+begin_src emacs-lisp :tangle yes

(use-package corfu
  :straight (corfu :type git
		   :host github
		   :repo "minad/corfu"
		   :branch "async"
		   :files (:defaults "extensions/*"))
  :custom ((corfu-auto t)
	   (corfu-auto-prefix 1)
	   (corfu-auto-delay 0)
	   (corfu-cycle t)
	   (tab-always-indent 'complete))
  :bind (nil
	 :map corfu-map
	 ("RET" . nil)
	 ("<return>" . nil)
	 ("TAB" . corfu-insert)
	 ("<tab>" . corfu-insert))
  :init
  (global-corfu-mode +1)

  :config
  (defun my/corfu-remap-tab-command ()
    (global-set-key [remap c-indent-line-or-region] #'indent-for-tab-command))
  (add-hook 'java-mode-hook #'my/corfu-remap-tab-command)

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
		(bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
		  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1))

#+end_src

*** corfu-popup

#+begin_src emacs-lisp :tangle yes

(use-package corfu-popupinfo
  :after corfu
  :config
  (corfu-popupinfo-mode +1))

#+end_src

*** corfu-prescient

#+begin_src emacs-lisp :tangle yes

(use-package corfu-prescient
  :straight t
  :after corfu
  :init
  (with-eval-after-load 'fussy
    (setq corfu-prescient-override-sorting t
	  corfu-prescient-completion-styles '(fussy)
	  corfu-prescient-completion-category-overrides nil))
  (corfu-prescient-mode +1))

#+end_src

*** cape

#+begin_src emacs-lisp :tangle yes

(use-package company-tabnine
  :straight (company-tabnine :type git :host github :repo "karta0807913/company-tabnine"))

(use-package cape
  :straight t
  :hook ((prog-mode . my/set-basic-capf)
	 (text-mode . my/set-basic-capf)
	 (meghanada-mode . my/set-meghanada-capf)
	 (lsp-completion-mode . my/set-lsp-capf))
  :config
  (defun my/convert-super-capf (arg-capf)
    (list (cape-capf-buster
	   (cape-super-capf arg-capf
			    (cape-company-to-capf #'company-yasnippet)
			    (cape-company-to-capf #'company-tabnine)))
	  #'cape-file
	  #'cape-dabbrev))

  (defun my/set-basic-capf ()
    (setq-local completion-at-point-functions (my/convert-super-capf (car completion-at-point-functions))))

  (defun my/set-meghanada-capf ()
    (setq-local completion-at-point-functions (my/convert-super-capf (cape-company-to-capf #'company-meghanada))))

  (defun my/set-lsp-capf ()
    (setq-local completion-at-point-functions (my/convert-super-capf #'lsp-completion-at-point)))

  (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-tabnine) t)
  (add-to-list 'completion-at-point-functions #'cape-file t)
  (add-to-list 'completion-at-point-functions #'cape-tex t)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev t)
  (add-to-list 'completion-at-point-functions #'cape-keyword t))

#+end_src

*** kind-icon

#+begin_src emacs-lisp :tangle yes

(use-package kind-icon
  :straight t
  :after corfu
  :custom (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+end_src

** [[https://github.com/minad/vertico][vertico]]

~helm~ や ~ivy~ よりも補完インタフェース新しくシンプルな補完パッケージです。

#+begin_src emacs-lisp :tangle yes

(use-package vertico
  :straight t
  :custom (vertico-cycle t)
  :init
  (vertico-mode +1)

  :config
  ;; Add prompt indicator to ~completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\~\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
	#'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  (with-eval-after-load 'consult
    ;; Use ~consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default ~completion--in-region' function.
    (setq completion-in-region-function
	  (lambda (&rest args)
	    (apply (if vertico-mode
		       #'consult-completion-in-region
		     #'completion--in-region)
		   args)))))

#+end_src

*** vertico-repeat

~verito~ の拡張機能の一つで直前のコマンドを再度表示します。

#+begin_src emacs-lisp :tangle yes

(use-package vertico-repeat
  :after vertico
  :load-path "straight/build/vertico/extensions"
  :bind (nil
	 :map my-space-map
	 ("z" . vertico-repeat))
  :hook (minibuffer-setup . vertico-repeat-save))

#+end_src

*** vertico-directory

~verito~ の拡張機能の一つで ~find-file~ 等、ファイルやディレクトリの操作を良くします。

#+begin_src emacs-lisp :tangle yes

(use-package vertico-directory
  :after vertico
  :load-path "straight/build/vertico/extensions"
  :bind (nil
	 :map vertico-map
	 ("<backspace>" . vertico-directory-delete-char)))

#+end_src

*** vertico-prescient

#+begin_src emacs-lisp :tangle yes

(use-package vertico-prescient
  :straight t
  :init
  (with-eval-after-load 'fussy
    (setq vertico-prescient-completion-styles '(fussy)
	  vertico-prescient-completion-category-overrides nil
	  vertico-prescient-override-sorting t))
  (vertico-prescient-mode +1))

#+end_src

** [[https://github.com/minad/consult][consult]]

~vertico~ や ~selectrum~ で利用できる便利なコマンドを提供してくれます。

#+begin_src emacs-lisp :tangle yes

;; Example configuration for Consult
(use-package consult
  :straight t
  :demand t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
	 ("C-c h" . consult-history)
	 ("C-c m" . consult-mode-command)
	 ("C-c k" . consult-kmacro)
	 ;; C-x bindings (ctl-x-map)
	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	 ([remap switch-to-buffer] . consult-buffer)                ;; orig. switch-to-buffer
	 ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	 ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	 ([remap bookmark-jump] . consult-bookmark)            ;; orig. bookmark-jump
	 ([remap project-switch-to-buffer] . consult-project-buffer)      ;; orig. project-switch-to-buffer
	 ;; Custom M-# bindings for fast register access
	 ("M-#" . consult-register-load)
	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	 ("C-M-#" . consult-register)
	 ;; Other custom bindings
	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	 ("<help> a" . consult-apropos)            ;; orig. apropos-command
	 :map goto-map
	 ("e" . consult-compile-error)
	 ("f" . consult-flymake)               ;; Alternative: consult-flycheck
	 ("g" . consult-goto-line)             ;; orig. goto-line
	 ("M-g" . consult-goto-line)           ;; orig. goto-line
	 ("o" . consult-outline)               ;; Alternative: consult-org-heading
	 ("m" . consult-mark)
	 ("k" . consult-global-mark)
	 ("i" . consult-imenu)
	 ("I" . consult-imenu-multi)
	 :map search-map
	 ("d" . consult-find)
	 ("D" . consult-locate)
	 ("g" . consult-grep)
	 ("G" . consult-git-grep)
	 ("r" . consult-ripgrep)
	 ("l" . consult-line)
	 ("L" . consult-line-multi)
	 ("m" . consult-multi-occur)
	 ("k" . consult-keep-lines)
	 ("u" . consult-focus-lines)
	 ("e" . consult-isearch-history)
	 :map isearch-mode-map
	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	 ;; Minibuffer history
	 :map minibuffer-local-map
	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
	register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
	xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )

#+end_src

*** [[https://github.com/karthink/consult-dir][consult-dir]]

#+begin_src emacs-lisp :tangle yes

(use-package consult-dir
  :straight t
  :bind (nil
	 :map my-file-map
	 ("d" . consult-dir)))

#+end_src

*** その他

#+begin_src emacs-lisp :tangle yes

(defun consult-ripgrep-current-directory ()
  (interactive)
  (consult-ripgrep default-directory))

(define-key search-map (kbd "R") #'consult-ripgrep-current-directory)

#+end_src

** [[https://github.com/minad/marginalia][marginalia]]

~vertico~ の候補に情報を追加してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package marginalia
  :straight t
  :init
  (marginalia-mode +1))

#+end_src

** [[https://github.com/oantolin/embark][embark]]

vertico の候補等に様々なアクションを提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package embark
  :straight t
  :bind (("C-." . embark-act)         ;; pick some comfortable binding
	 ("C-;" . embark-dwim)        ;; good alternative: M-.
	 ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		 nil
		 (window-parameters (mode-line-format . none)))))

#+end_src

*** embark-consult

~embark~ と ~consult~ を連動させます。

#+begin_src emacs-lisp :tangle yes

(use-package embark-consult
  :straight t ; only need to install it, embark loads it after consult if found
  :hook (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** [[https://github.com/joaotavora/yasnippet][yasnippet]]

スニペット機能を提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package yasnippet
  :straight t
  :bind (nil
	 :map yas-keymap
	 ("<tab>" . nil)
	 ("TAB" . nil)
	 ("<backtab>" . nil)
	 ("S-TAB" . nil)
	 ("C-o" . yas-next-field-or-maybe-expand))
  :init
  (yas-global-mode +1))

#+end_src

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]

各言語のスニペットを提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package yasnippet-snippets
  :straight t
  :after yasnippet)

#+end_src

** [[https://github.com/jscheid/dtrt-indent][dtrt-indent]]

インデントを推測して、設定してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package dtrt-indent
  :straight t
  :init
  (dtrt-indent-global-mode +1))

#+end_src

** [[https://magit.vc/][magit]]

Emacs上でGitを快適に操作できるようにしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package magit
  :straight t)

#+end_src

** [[https://github.com/dgutov/diff-hl][diff-hl]]

#+begin_src emacs-lisp :tangle yes

(use-package diff-hl
  :straight t
  :init
  (global-diff-hl-mode +1))

#+end_src

** [[https://github.com/justbur/emacs-which-key][which-key]]

キーバインドを可視化してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package which-key
  :straight t
  :init
  (which-key-mode +1))

#+end_src

** [[https://github.com/bbatsov/projectile][projectile]]

プロジェクトに関する便利機能を提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package projectile
  :straight t
  :bind (("C-c p" . projectile-command-map)
	 :map my-space-map
	 ("p" . projectile-command-map))
  :init
  (projectile-mode +1))

#+end_src

** [[https://www.flycheck.org/en/latest/][flycheck]]

構文チェック機能を提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package flycheck
  :straight t
  :custom ((flycheck-idle-change-delay 1.0)
	   (flycheck-display-errors-delay 1.0)
	   (flycheck-idle-buffer-switch-delay 1.0))
  :bind (nil
	 :map my-error-map
	 ("l" . flycheck-list-errors)
	 ("n" . flycheck-next-error)
	 ("p" . flycheck-previous-error))
  :init
  (global-flycheck-mode +1))

#+end_src

*** [[https://github.com/alexmurray/flycheck-posframe][flycheck-posframe]]

エラー内容などを ~posframe~ を使用して表示してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package flycheck-posframe
  :straight t
  :custom ((flycheck-posframe-warning-prefix "! ")
	   (flycheck-posframe-info-prefix "··· ")
	   (flycheck-posframe-error-prefix "X ")
	   (flycheck-posframe-border-width 1))
  :hook (flycheck-mode . flycheck-posframe-mode)
  :config
  (with-eval-after-load 'company
    (add-hook 'flycheck-posframe-inhibit-functions 'company--active-p))
  (with-eval-after-load 'evil
    (add-hook 'flycheck-posframe-inhibit-functions 'evil-insert-state-p)
    (add-hook 'flycheck-posframe-inhibit-functions 'evil-replace-state-p)))

#+end_src

*** [[https://github.com/minad/consult-flycheck][consult-flycheck]]

チェック内容を ~consult~ を使用して絞り込めます。

#+begin_src emacs-lisp :tangle yes

(use-package consult-flycheck
  :straight t
  :bind (nil
	 :map my-error-map
	 ("e" . consult-flycheck)))

#+end_src

** [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]]

編集履歴をツリー表示してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package undo-tree
  :straight t
  :custom (undo-tree-auto-save-history nil)
  :bind (nil
	 :map my-space-map
	 ("u" . undo-tree-visualize))
  :init
  (global-undo-tree-mode +1))

#+end_src

** [[https://github.com/dajva/rg.el][rg]]

~ripgrep~ を利用してGrep検索してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package rg
  :straight t)

#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

括弧を色付けしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

インデントを可視化してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package highlight-indent-guides
  :straight t
  :bind (nil
	 :map my-toggle-map
	 ("i" . highlight-indent-guides-mode))
  :hook ((prog-mode . highlight-indent-guides-mode)
	 (text-mode . highlight-indent-guides-mode)))

#+end_src

** theme

*** 外枠のスペースの色を調整する

#+begin_src emacs-lisp :tangle yes

(defun my/init-face ()
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background)))

(defadvice load-theme (after theme activate)
  (my/init-face))

(with-eval-after-load 'consult
  (defadvice consult-theme (after theme activate)
    (my/init-face)))

#+end_src

*** modus-themes

#+begin_src emacs-lisp :tangle yes

(use-package modus-themes
  :straight t
  )

#+end_src

*** ef-themes

#+begin_src emacs-lisp :tangle yes

(use-package ef-themes
  :straight t
  :init
  (load-theme 'ef-deuteranopia-light t))

#+end_src

*** solarized-theme

#+begin_src emacs-lisp :tangle yes

(use-package solarized-theme
  :straight t
  :init
  ;; (load-theme 'solarized-light t)
  )

#+end_src

*** doom-themes

#+begin_src emacs-lisp :tangle yes

(use-package doom-themes
  :straight t
  :custom ((doom-themes-enable-bold t)
	   (doom-themes-enable-italic t)
	   (doom-themes-treemacs-theme "doom-colors"))
  :init
  ;; (load-theme 'doom-nord-light t)
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

#+end_src

** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]

Emacsを再起動してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package restart-emacs
  :straight t
  :bind (nil
	 :map my-quit-map
	 ("r" . restart-emacs)))

#+end_src

** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

アイコンのインストールなど、アイコンに関する機能を提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package all-the-icons
  :straight t
  :if (display-graphic-p))

#+end_src

*** all-the-icons-completion

~vertico~ でアイコンが表示されるようになります。

#+begin_src emacs-lisp :tangle yes

(use-package all-the-icons-completion
  :straight t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode +1))

#+end_src

** [[https://github.com/magnars/expand-region.el][expand-region]]

~er/expand-region~ を押すと選択範囲をどんどん広げてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package expand-region
  :straight t
  :demand t
  :bind (("C-=" . er/expand-region)
	 :map my-space-map
	 ("v" . er/expand-region)))

#+end_src

** pulsar

#+begin_src emacs-lisp :tangle yes

(use-package pulsar
  :straight t
  :custom ((pulsar-pulse t)
	   (pulsar-delay 0.055)
	   (pulsar-iterations 10)
	   (pulsar-face 'pulsar-blue)
	   (pulsar-highlight-face 'pulsar-blue))
  :init
  (pulsar-global-mode +1))

#+end_src

** [[https://github.com/emacsmirror/gcmh][gcmh]]

ウィンドウが非活性な時などにガベージコレクションを実行してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package gcmh
  :straight t
  :custom ((gcmh-idle-delay 'auto)
	   (gcmh-auto-idle-delay-factor 10)
	   (gcmh-high-cons-threshold (* 128 1024 1024)))
  :init
  (gcmh-mode +1))

#+end_src

** [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]

起動画面をいい感じにしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package dashboard
  :straight t
  :custom ((dashboard-center-content t)
	   (dashboard-set-heading-icons t)
	   (dashboard-set-file-icons t)
	   (dashboard-set-navigator t)
	   (dashboard-set-init-info t))
  :init
  (dashboard-setup-startup-hook))

#+end_src

** [[https://github.com/k-talo/volatile-highlights.el][volatile-highlights]]

Redo等、一部の操作を強調表示して操作がわかりやすくなります。

#+begin_src emacs-lisp :tangle yes

(use-package volatile-highlights
  :straight t
  :init
  (volatile-highlights-mode +1))

#+end_src

** [[https://github.com/jwiegley/alert][alert]]

通知機能を利用できるようにします。
主に ~org-pomodoro~ で使用します。

#+begin_src emacs-lisp :tangle yes

(use-package alert
  :straight t
  :custom (alert-default-style 'libnotify))

#+end_src

*** [[https://github.com/gkowzan/alert-toast][alert-toast]]

Windows用の設定です。

#+begin_src emacs-lisp :tangle yes

(use-package alert-toast
  :straight t
  :if IS-WINDOWS
  :custom (alert-default-style 'toast))

#+end_src

** [[https://github.com/casouri/valign][valign]]

~org-mode~ や ~markdown~ のテーブル機能で日本語が含まれてもずれないようにしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package valign
  :straight t
  :hook ((org-mode . valign-mode)
	 (markdown-mode . valign-mode)))

#+end_src

** [[https://emacs-tree-sitter.github.io/][tree-sitter]]

~tree-sitter~ をEmacsで利用できるようにします。

#+begin_src emacs-lisp :tangle yes

(use-package tree-sitter
  :straight t
  :hook (tree-sitter-after-on . tree-sitter-hl-mode)
  :init
  (global-tree-sitter-mode))

#+end_src

*** [[https://github.com/emacs-tree-sitter/tree-sitter-langs][tree-sitter-langs]]

#+begin_src emacs-lisp :tangle yes

(use-package tree-sitter-langs
  :straight t
  :after tree-sitter)

#+end_src

** [[https://polymode.github.io/][polymode]]

一つのバッファーに対して、複数のメジャーモードを適用してくれるようになります。
~org-babel~ 等で活躍します。

#+begin_src emacs-lisp :tangle yes

(use-package polymode
  :straight t)

(use-package poly-markdown
  :straight t)

(use-package poly-org
  :straight t)

#+end_src

** [[https://github.com/Alexander-Miller/treemacs][treemacs]]

~lsp-mode~ を利用すると一緒にインストールされます。
普段は利用しませんが、READMEをもとに設定しています。

#+begin_src emacs-lisp :tangle yes

(use-package treemacs
  :straight t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	  treemacs-deferred-git-apply-delay        0.5
	  treemacs-directory-name-transformer      #'identity
	  treemacs-display-in-side-window          t
	  treemacs-eldoc-display                   'simple
	  treemacs-file-event-delay                2000
	  treemacs-file-extension-regex            treemacs-last-period-regex-value
	  treemacs-file-follow-delay               0.2
	  treemacs-file-name-transformer           #'identity
	  treemacs-follow-after-init               t
	  treemacs-expand-after-init               t
	  treemacs-find-workspace-method           'find-for-file-or-pick-first
	  treemacs-git-command-pipe                ""
	  treemacs-goto-tag-strategy               'refetch-index
	  treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	  treemacs-hide-dot-git-directory          t
	  treemacs-indentation                     2
	  treemacs-indentation-string              " "
	  treemacs-is-never-other-window           nil
	  treemacs-max-git-entries                 5000
	  treemacs-missing-project-action          'ask
	  treemacs-move-forward-on-expand          nil
	  treemacs-no-png-images                   nil
	  treemacs-no-delete-other-windows         t
	  treemacs-project-follow-cleanup          nil
	  treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	  treemacs-position                        'left
	  treemacs-read-string-input               'from-child-frame
	  treemacs-recenter-distance               0.1
	  treemacs-recenter-after-file-follow      nil
	  treemacs-recenter-after-tag-follow       nil
	  treemacs-recenter-after-project-jump     'always
	  treemacs-recenter-after-project-expand   'on-distance
	  treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	  treemacs-show-cursor                     nil
	  treemacs-show-hidden-files               t
	  treemacs-silent-filewatch                nil
	  treemacs-silent-refresh                  nil
	  treemacs-sorting                         'alphabetic-asc
	  treemacs-select-when-already-in-treemacs 'move-back
	  treemacs-space-between-root-nodes        t
	  treemacs-tag-follow-cleanup              t
	  treemacs-tag-follow-delay                1.5
	  treemacs-text-scale                      nil
	  treemacs-user-mode-line-format           nil
	  treemacs-user-header-line-format         nil
	  treemacs-wide-toggle-width               70
	  treemacs-width                           35
	  treemacs-width-increment                 1
	  treemacs-width-is-initially-locked       t
	  treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind (nil
	 :map global-map
	 ("M-0"       . treemacs-select-window)
	 ("C-x t 1"   . treemacs-delete-other-windows)
	 ("C-x t t"   . treemacs)
	 ("C-x t d"   . treemacs-select-directory)
	 ("C-x t B"   . treemacs-bookmark)
	 ("C-x t C-t" . treemacs-find-file)
	 ("C-x t M-t" . treemacs-find-tag)
	 :map my-file-map
	 ("t" . treemacs)))

(use-package treemacs-evil
  :after (treemacs evil)
  :straight t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :straight t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :straight t)

(use-package treemacs-magit
  :after (treemacs magit)
  :straight t)

(use-package treemacs-all-the-icons
  :straight t
  :after treemacs treemacs-icons-dired
  :config
  (treemacs-load-theme "all-the-icons"))

#+end_src

** [[https://github.com/radian-software/apheleia][apheleia]]

保存時などに自動的にフォーマットしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package apheleia
  :straight t
  :hook (python-mode . apheleia-mode))

#+end_src

** string-inflection

#+begin_src emacs-lisp :tangle yes

(use-package string-inflection
  :straight t
  :bind (nil
	 :map my-string-inflection-map
	 ("a" . string-inflection-all-cycle)
	 ("_" . string-inflection-underscore)
	 ("p" . string-inflection-pascal-case)
	 ("c" . string-inflection-camelcase)
	 ("u" . string-inflection-upcase)
	 ("k" . string-inflection-kebab-case)
	 ("C" . string-inflection-capital-underscore)))

#+end_src

** line-reminder

#+begin_src emacs-lisp :tangle yes

(use-package line-reminder
  :straight t
  :init
  (global-line-reminder-mode +1))

#+end_src

** super-save

#+begin_src emacs-lisp :tangle yes

(use-package super-save
  :straight t
  :custom (super-save-auto-save-when-idle t)
  :config
  (with-eval-after-load 'evil
    (add-to-list 'super-save-triggers 'evil-window-next)
    (add-to-list 'super-save-triggers 'evil-window-prev))

  (defun dot/super-save-disable-advice (orig-fun &rest args)
    "Dont auto-save under these conditions."
    (unless (equal (car args) " *LV*")
      (apply orig-fun args)))
  (advice-add 'super-save-command-advice :around #'dot/super-save-disable-advice)

  (super-save-mode +1))

#+end_src

** gc-buffers

使用されていない一時保存バッファをクリアしてくれるパッケージです。

#+begin_src emacs-lisp :tangle yes

(use-package gc-buffers
  :straight (:type git :repo "https://codeberg.org/akib/emacs-gc-buffers.git")
  :init
  (gc-buffers-mode +1))

#+end_src

** ctrlf

#+begin_src emacs-lisp :tangle yes

(use-package ctrlf
  :straight t
  :custom (ctrlf-default-search-style 'fuzzy)
  :init
  (ctrlf-mode +1))

#+end_src

** smartparens

#+begin_src emacs-lisp :tangle yes

(use-package smartparens
  :straight t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode +1))

#+end_src

** ws-butler

編集行の余分な末尾の空白を削除してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package ws-butler
  :straight t
  :hook (prog-mode . ws-butler-mode))

#+end_src

** go-translate

Emacs内で翻訳してくれるようになります。

#+begin_src emacs-lisp :tangle yes

(use-package go-translate
  :straight t
  :custom (gts-translate-list '(("en" "ja")))
  :bind (nil
	 :map my-space-map
	 ("T" . gts-do-translate)))

#+end_src

** avy

#+begin_src emacs-lisp :tangle yes

(use-package avy
  :straight t
  :bind (nil
	 :map my-space-map
	 ("a" . avy-goto-char)))

#+end_src

** solaire-mode

#+begin_src emacs-lisp :tangle yes

(use-package solaire-mode
  :straight t
  :config
  (solaire-global-mode +1))

#+end_src

** smart-hungry-delete

#+begin_src emacs-lisp :tangle yes

(use-package smart-hungry-delete
  :straight t
  :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
	 ([remap delete-backward-char] . smart-hungry-delete-backward-char)
	 ([remap delete-char] . smart-hungry-delete-forward-char))
  :init
  (smart-hungry-delete-add-default-hooks))

#+end_src

** dirvish

#+begin_src emacs-lisp :tangle yes

(use-package dirvish
  :straight t
  :config
  (dirvish-override-dired-mode +1))

#+end_src

** el-fetch

#+begin_src emacs-lisp :tangle yes

(use-package el-fetch
  :straight t)

#+end_src

** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

EmacsでLSP機能が利用できるようになります。

#+begin_src emacs-lisp :tangle yes

(use-package lsp-mode
  :straight t
  :custom ((lsp-keymap-prefix "M-l")
	   (lsp-signature-auto-activate '(:on-trigger-char :after-completion :on-server-request))
	   (lsp-idle-delay 1.0)
	   (lsp-semantic-tokens-enable t)
	   (lsp-completion-provider :none))
  :general (:states '(normal visual) :keymaps 'lsp-mode-map :prefix "SPC m" :prefix-command 'my-lsp-command-map)
  :bind (nil
	 :map my-lsp-command-map
	 ("a" . lsp-execute-code-action)
	 ("r" . lsp-rename)
	 ("f" . lsp-find-references))
  :hook ((lsp-mode . lsp-enable-which-key-integration)
	 (html-mode . lsp)
	 (css-mode . lsp)
	 (rust-mode . lsp)
	 (nxml-mode . lsp)
	 (java-mode . lsp)
	 (js-mode . lsp)))

#+end_src

*** [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]

UIを提供してくれます。

#+begin_src emacs-lisp :tangle yes

(use-package lsp-ui
  :straight t
  :after lsp-mode
  :custom ((lsp-ui-doc-delay 1.0)
	   (lsp-ui-sideline-delay 1.0)))

#+end_src

*** [[https://github.com/emacs-lsp/lsp-java][lsp-java]]

JavaのLSは特殊なため、専用の拡張パッケージをインストールします。

最新のバージョンは[[https:download.eclipse.org/jdtls/milestones/?d][ここ]]を参照する。
※1.13以降はJava17が必要

#+begin_src emacs-lisp :tangle yes

(use-package lsp-java
  :straight t
  :after (lsp-mode java-mode))

#+end_src

*** [[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright]]

~pyright~ を利用したい場合、こちらのパッケージをインストールします。

#+begin_src emacs-lisp :tangle yes

(use-package lsp-pyright
  :straight t
  :after (lsp-mode python-mode))

#+end_src

*** [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]

~treemacs~ と ~lsp-mode~ を組み合わせてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package lsp-treemacs
  :straight t
  :after (lsp-mode treemacs))

#+end_src

*** lsp-dired

#+begin_src emacs-lisp :tangle yes

(use-package lsp-dired
  :after (lsp-mode dired)
  :hook (dired-mode . lsp-dired-mode))

#+end_src

*** consult-lsp

#+begin_src emacs-lisp :tangle yes

(use-package consult-lsp
  :straight t
  :after consult lsp-mode
  :bind (nil
	 :map lsp-mode-map
	 ([remap xref-find-apropos] . consult-lsp-symbols)
	 :map my-lsp-command-map
	 ("d" . consult-lsp-diagnostics)
	 ("s" . consult-lsp-symbols)
	 ("S" . consult-lsp-file-symbols)))

#+end_src

** language

各言語のインデントの設定や専用のパッケージを設定しています。

*** elisp

**** [[https://github.com/Fanael/highlight-defined][highlight-defined]]

既知のシンボルに色を付けてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package highlight-defined
  :straight t
  :hook (emacs-lisp-mode . highlight-defined-mode))

#+end_src

**** [[https://github.com/Fanael/highlight-quoted][highlight-quoted]]

引用符と引用記号を色付けしてくれます。

#+begin_src emacs-lisp :tangle yes

(use-package highlight-quoted
  :straight t
  :hook (emacs-lisp-mode . highlight-quoted-mode))

#+end_src

*** java

#+begin_src emacs-lisp :tangle yes

(use-package cc-mode
  :hook (java-mode . (lambda () (setq-local tab-width 2))))

#+end_src

*** web

**** html

#+begin_src emacs-lisp :tangle yes

(use-package sgml-mode
  :hook (html-mode . (lambda () (setq-local tab-width 2)))
  :mode ("\\.jsp\\'" . html-mode))

#+end_src

**** css

#+begin_src emacs-lisp :tangle yes

(use-package css-mode
  :hook (css-mode . (lambda () (setq-local tab-width 2))))

#+end_src

**** javascript

#+begin_src emacs-lisp :tangle yes

(use-package js
  :hook (js-mode . (lambda () (setq-local tab-width 2))))

#+end_src

**** [[https://github.com/smihica/emmet-mode][emmet-mode]]

~Emmet~ を導入します。

#+begin_src emacs-lisp :tangle yes

(use-package emmet-mode
  :straight t
  :hook ((html-mode . emmet-mode)
	 (css-mode . emmet-mode)))

#+end_src

**** [[https://github.com/yasuyk/web-beautify][web-beautify]]

~web-beautify~ を導入します。

#+begin_src emacs-lisp :tangle yes

(use-package web-beautify
  :straight t)

#+end_src

*** [[https://github.com/rust-lang/rust-mode][rust-mode]]

#+begin_src emacs-lisp :tangle yes

(use-package rust-mode
  :straight t
  :hook (rust-mode . (lambda ()
		       (setq-local tab-width 4))))

#+end_src

**** [[https://github.com/kwrooijen/cargo.el][cargo]]

#+begin_src emacs-lisp :tangle yes

(use-package cargo
  :straight t
  :hook (rust-mode . cargo-minor-mode))

#+end_src

*** python

**** [[https://github.com/jorgenschaefer/pyvenv][pyvenv]]

#+begin_src emacs-lisp :tangle yes

(use-package pyvenv
  :straight t)

#+end_src

*** common lisp

**** [[https://slime.common-lisp.dev/][slime]]

#+begin_src emacs-lisp :tangle yes

(use-package slime
  :straight t
  :custom (inferior-lisp-program "sbcl"))

#+end_src

**** [[https://github.com/anwyn/slime-company][slime-company]]

#+begin_src emacs-lisp :tangle yes

(use-package slime-company
  :straight t
  :after slime company
  :config
  (slime-setup '(slime-fancy slime-company slime-banner)))

#+end_src

*** sql

**** [[https://github.com/alex-hhh/emacs-sql-indent][sql-indent]]

#+begin_src emacs-lisp :tangle yes

(use-package sql-indent
  :straight t
  :hook (sql-mode . sqlind-minor-mode))

#+end_src

**** sql-format

#+begin_src emacs-lisp :tangle yes

(use-package sqlformat
  :straight t
  :custom (sqlformat-command "sqlfluff"))

#+end_src

*** xml

#+begin_src emacs-lisp :tangle yes

(use-package nxml-mode
  :hook (nxml-mode . (lambda () (setq-local tab-width 4))))

#+end_src

*** markdown

#+begin_src emacs-lisp :tangle yes

(use-package markdown-mode
  :hook (markdown-mode . (lambda ()
			   (setq-local tab-width 4
				       indent-tabs-mode nil))))

#+end_src

** footer

#+begin_src emacs-lisp :tangle yes

(provide 'config)
;;; late-init.el ends here

#+end_src
